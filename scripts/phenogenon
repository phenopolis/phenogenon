#!/usr/bin/env python
from __future__ import print_function, division
import sys
from optparse import OptionParser
import warnings
import json
import os
import math
import copy
import numpy as np
from collections import defaultdict,Counter
from scipy import stats

from phenogenon import goodness_of_fit as goodness_of_fit
from phenogenon import gnomad_utils
from phenogenon import helper
from phenogenon import phenogenon as Pheno

if __name__ == '__main__':
    # in the end some of the args have to go to the config
    usage = "Usage: %prog [options] --vcf_file [FILE] --range [CHR:START-END] --output [FILE]"
    parser = OptionParser(usage=usage)

    parser.add_option("--output",
                      dest="output",
                      help="The path to the output file")

    parser.add_option("--vcf_file",
                      dest="vcf_file",
                      help="The path to the input VCF file (must be bgzipped and tabix-indexed)")

    parser.add_option("--range",
                      dest="range",
                      help="Genome location of gene to analyse e.g. 2:4000-6000")

    parser.add_option("--config_file",
                      dest="config_file",
                      default='configure.cfg',
                      help="The path to the config file")

    (options, args) = parser.parse_args()

    if not options.vcf_file:
        parser.error('A VCF file is required for analysis (use `phenogenon --vcf_file /path/to/file`)')
    if not options.range:
        parser.error('A Genomic location is required for the analysis (use `phenogenon --range CHR:START-END`)')
    if not options.output:
        parser.error('A output file needs to be specified')

    if os.path.isfile(options.output):
        print('File already exists')
        sys.exit()
    args = dict(
        range = options.range,
        vcf_file = options.vcf_file,
    )
    # update args with commons.cfg
    helper.CONFIG_FILE = args.config_file
    args.update(helper.OFFLINE_CONFIG['generic'])
    args.update(helper.OFFLINE_CONFIG['phenogenon'])
    args['N'] = args.pop('n')

    # get result and write to output
    result = goodness_of_fit.main(**args)
    with open(options.output, 'wt') as outf:
        json.dump(result, outf)
    print('==done==')